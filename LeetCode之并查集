并查集算法模板
class unionFind {
public:
    int *parent;
    int *size;
    int m_count;
public:
    unionFind(int n) {
        parent = new int[n];
        size = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
            size[i] = 1;
        }

        m_count = n;
    }

    int find(int p) {
        while (p != parent[p]) {
            parent[p] = parent[parent[p]];
            p = parent[p];
        }

        return p;
    }

    bool connected(int p, int q) {
        return find(p) == find(q);
    }

    void merger(int p, int q) {
        int pRoot = find(p);
        int qRoot = find(q);
        if (pRoot == qRoot)
            return;

        if (size[pRoot] > size[qRoot]) {
            parent[qRoot] = pRoot;
            size[pRoot] += size[qRoot];
        }
        else {
            parent[pRoot] = qRoot;
            size[qRoot] += size[pRoot];
        }

        m_count--;
    }

    int getCount() {
        return m_count;
    }
};
